var documenterSearchIndex = {"docs":
[{"location":"library/#Library-1","page":"Library","title":"Library","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Pages = [\"library.md\"]\nDepth = 2","category":"page"},{"location":"library/#Public-API-1","page":"Library","title":"Public API","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"OptimizationParameter\nOptimizationParameter(x0)\nget_x0\nget_lb\nget_ub\nget_scaling\nget_dv\nget_description\nset_x0\nset_x0!\nset_lb\nset_lb!\nset_ub\nset_ub!\nset_scaling\nset_scaling!\nset_dv\nset_dv!\nset_description\nset_description!\nupdate_parameters\nupdate_parameters!\nupdate_design_variables\nupdate_design_variables!\nnamed_tuple_to_dict\ndict_to_named_tuple\nassemble_input\nget_values\nprint_design_variables\nread_parameters\nwrite_parameters","category":"page"},{"location":"library/#OptimizationParameters.OptimizationParameter","page":"Library","title":"OptimizationParameters.OptimizationParameter","text":"OptimizationParameter{S, TX, TF, TB, DV}\n\nThe basic building block of the interface, representing one potential design variable. S is a tuple with the dimensions of the underlying data and DV indicates whether a design variable is activated for the variable.\n\n\n\n\n\n","category":"type"},{"location":"library/#OptimizationParameters.OptimizationParameter-Tuple{Any}","page":"Library","title":"OptimizationParameters.OptimizationParameter","text":"OptimizationParameter(x0; lb=-Inf, ub=Inf, scaling=1.0, dv=false, description=\"\")\n\nThe default constructor for objects of type OptimizationParameter.  x0, lb, ub, scaling, and dv may be either scalars or arrays, however, all array inputs must have the same dimensions.\n\n\n\n\n\n","category":"method"},{"location":"library/#OptimizationParameters.get_x0","page":"Library","title":"OptimizationParameters.get_x0","text":"get_x0(optparam::OptimizationParameter)\n\nReturns initial value(s) for optparam\n\n\n\n\n\nget_x0(optparams, field)\n\nReturns initial value(s) for field in optparams\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.get_lb","page":"Library","title":"OptimizationParameters.get_lb","text":"get_lb(optparam::OptimizationParameter)\n\nReturns lower bound(s) for optparam\n\n\n\n\n\nget_lb(optparams, field)\n\nReturns lower bound(s) for field in optparams\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.get_ub","page":"Library","title":"OptimizationParameters.get_ub","text":"get_ub(optparam::OptimizationParameter)\n\nReturns upper bound(s) for optparam\n\n\n\n\n\nget_ub(optparams, field)\n\nReturns upper bound(s) for field in optparams\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.get_scaling","page":"Library","title":"OptimizationParameters.get_scaling","text":"get_scaling(optparam::OptimizationParameter)\n\nReturns scaling parameter(s) for optparam\n\n\n\n\n\nget_scaling(optparams, field)\n\nReturns scaling parameter(s) for field in optparams\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.get_dv","page":"Library","title":"OptimizationParameters.get_dv","text":"get_dv(optparam::OptimizationParameter)\n\nReturns design variable flag(s) for optparam\n\n\n\n\n\nget_dv(optparams, field)\n\nReturns design variable flag(s) for field in optparams\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.get_description","page":"Library","title":"OptimizationParameters.get_description","text":"get_description(optparam::OptimizationParameter)\n\nReturns the description for optparam\n\n\n\n\n\nget_description(optparams, field)\n\nReturns the description for field in optparams\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.set_x0","page":"Library","title":"OptimizationParameters.set_x0","text":"set_x0(optparam::OptimizationParameter, x0)\n\nReturns optparam with the initial value(s) given by x0\n\n\n\n\n\nset_x0(optparams::AbstractDict, field, x0)\n\nModifies the field in optparams to have the initial value(s) given by x0\n\n\n\n\n\nset_x0(optparams::NamedTuple, field, x0)\n\nModifies the field in optparams to have the initial value(s) given by x0\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.set_x0!","page":"Library","title":"OptimizationParameters.set_x0!","text":"set_x0!(optparams::AbstractDict, field, x0)\n\nModifies the field in optparams to have the initial value(s) given by x0\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.set_lb","page":"Library","title":"OptimizationParameters.set_lb","text":"set_lb(optparam::OptimizationParameter, lb)\n\nReturns optparam with the lower bound(s) given by lb\n\n\n\n\n\nset_lb(optparams::AbstractDict, field, lb)\n\nModifies the field in optparams to have the lower bound(s) given by lb\n\n\n\n\n\nset_lb(optparams::NamedTuple, field, lb)\n\nModifies the field in optparams to have the lower bound(s) given by lb\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.set_lb!","page":"Library","title":"OptimizationParameters.set_lb!","text":"set_lb!(optparams::AbstractDict, field, lb)\n\nModifies the field in optparams to have the lower bound(s) given by lb\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.set_ub","page":"Library","title":"OptimizationParameters.set_ub","text":"set_ub(optparam::OptimizationParameter, ub)\n\nReturns optparam with the upper bound(s) given by ub\n\n\n\n\n\nset_ub(optparams::AbstractDict, field, ub)\n\nModifies the field in optparams to have the upper bound(s) given by ub\n\n\n\n\n\nset_ub(optparams::NamedTuple, field, ub)\n\nModifies the field in optparams to have the upper bound(s) given by ub\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.set_ub!","page":"Library","title":"OptimizationParameters.set_ub!","text":"set_ub!(optparams::AbstractDict, field, ub)\n\nModifies the field in optparams to have the upper bound(s) given by ub\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.set_scaling","page":"Library","title":"OptimizationParameters.set_scaling","text":"set_scaling(optparam::OptimizationParameter, scaling)\n\nReturns optparam with the scaling parameter given by scaling\n\n\n\n\n\nset_scaling(optparams::AbstractDict, field, scaling)\n\nModifies the field in optparams to have the scaling parameter(s) given by scaling\n\n\n\n\n\nset_scaling(optparams::NamedTuple, field, scaling)\n\nModifies the field in optparams to have the scaling parameter(s) given by scaling\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.set_scaling!","page":"Library","title":"OptimizationParameters.set_scaling!","text":"set_scaling!(optparams::AbstractDict, field, scaling)\n\nModifies the field in optparams to have the scaling parameter(s) given by scaling\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.set_dv","page":"Library","title":"OptimizationParameters.set_dv","text":"set_dv(optparam::OptimizationParameter, dv)\n\nReturns optparam with the design variable flag(s) given by dv\n\n\n\n\n\nset_dv(optparams::AbstractDict, field, dv)\n\nModifies the field in optparams to have the design variable flag(s) given by dv\n\n\n\n\n\nset_dv(optparams::NamedTuple, field, dv)\n\nModifies the field in optparams to have the design variable flag(s) given by dv\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.set_dv!","page":"Library","title":"OptimizationParameters.set_dv!","text":"set_dv!(optparams::AbstractDict, field, dv)\n\nModifies the field in optparams to have the design variable flag(s) given by dv\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.set_description","page":"Library","title":"OptimizationParameters.set_description","text":"set_description(optparam::OptimizationParameter, description)\n\nReturns optparam with the description given by description\n\n\n\n\n\nset_description(optparams::AbstractDict, field, description)\n\nModifies the field in optparams to have the description given by description\n\n\n\n\n\nset_description(optparams::NamedTuple, field, description)\n\nModifies the field in optparams to have the description given by description\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.set_description!","page":"Library","title":"OptimizationParameters.set_description!","text":"set_description!(optparams::AbstractDict, field, description)\n\nModifies the field in optparams to have the description given by description\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.update_parameters","page":"Library","title":"OptimizationParameters.update_parameters","text":"update_parameters(optparams, params)\n\nInserts parameters from params into optparams and returns the result. optparams is a named tuple or dictionary filled with objects of type OptimizationParameter. params is a named tuple or dictionary with the parameter values to be replaced or a vector of scaled design variables.\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.update_parameters!","page":"Library","title":"OptimizationParameters.update_parameters!","text":"update_parameters!(optparams, params)\n\nInserts parameters from params into optparams and returns the result. optparams is a dictionary filled with objects of type OptimizationParameter params is a dictionary with the parameter values to be replaced or a vector of scaled design variables\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.update_design_variables","page":"Library","title":"OptimizationParameters.update_design_variables","text":"update_design_variables(original, optimized)\n\nCopies design variables that are active in both original and optimized from optimized into original and returns the result. original is a named tuple or dictionary filled with objects of type OptimizationParameter optimized is a named tuple or dictionary filled with objects of type OptimizationParameter\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.update_design_variables!","page":"Library","title":"OptimizationParameters.update_design_variables!","text":"update_design_variables!(original, optimized)\n\nCopies design variables that are active in both original and optimized from optimized into original and returns the result. original is a named tuple or dictionary filled with objects of type OptimizationParameter optimized is a named tuple or dictionary filled with objects of type OptimizationParameter\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.named_tuple_to_dict","page":"Library","title":"OptimizationParameters.named_tuple_to_dict","text":"named_tuple_to_dict(nt)\n\nConverts a named tuple to an ordered dictionary\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.dict_to_named_tuple","page":"Library","title":"OptimizationParameters.dict_to_named_tuple","text":"dict_to_named_tuple(dict)\n\nConverts a dictionary to a named tuple\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.assemble_input","page":"Library","title":"OptimizationParameters.assemble_input","text":"assemble_input(optparams)\n\nAssembles the input for the optimization problem: x0, lb, ub\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.get_values","page":"Library","title":"OptimizationParameters.get_values","text":"get_values(optparam[, x])\n\nReturns a named tuple or dictionary of the values of the optimization parameter(s) given a vector of design variables.  If x is not provided, the default parameter values are returned.\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.print_design_variables","page":"Library","title":"OptimizationParameters.print_design_variables","text":"print_design_variables(optparams, x)\n\nPrints design variable get_values for the current iteration\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.read_parameters","page":"Library","title":"OptimizationParameters.read_parameters","text":"read_parameters(file; dict=true)\n\nReads the optimization parameters in a csv file and returns either an ordered dictionary or a named tuple of the optimization parameters.\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.write_parameters","page":"Library","title":"OptimizationParameters.write_parameters","text":"write_parameters([inputfile, ]outputfile, optparams)\n\nWrites the optimization parameters in optparams to a csv file.  If given, the file inputfile is used as a template for the organization of the resulting file.\n\n\n\n\n\n","category":"function"},{"location":"library/#Private-API-1","page":"Library","title":"Private API","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"OptimizationParameters.get_value\nOptimizationParameters.design_variable_offset\nOptimizationParameters.parse_value\nOptimizationParameters.write_value\nOptimizationParameters.get_column_ordering","category":"page"},{"location":"library/#OptimizationParameters.get_value","page":"Library","title":"OptimizationParameters.get_value","text":"get_value(optparam[, x])\n\nReturns the value(s) of the optimization parameter(s) given a scalar/vector of design variables.  If x is not provided, the default parameter values are returned.\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.design_variable_offset","page":"Library","title":"OptimizationParameters.design_variable_offset","text":"design_variable_offset(lb, ub)\n\nDetermines the amount to offset a design variable in order to center it around zero\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.parse_value","page":"Library","title":"OptimizationParameters.parse_value","text":"parse_value(value)\n\nReturns value if value is not a string.\n\nIf value is a string this function checks if value should have been parsed as a boolean and returns the corresponding boolean.\n\nOtherwise value is parsed as a Julia expression, with a few customizations:\n\n[] parses to Float64[]\nThe unicode characters “ and ” are converted to \"\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.write_value","page":"Library","title":"OptimizationParameters.write_value","text":"write_value(value)\n\nReturns a string representing value using a set of custom rules.\n\n\n\n\n\n","category":"function"},{"location":"library/#OptimizationParameters.get_column_ordering","page":"Library","title":"OptimizationParameters.get_column_ordering","text":"get_column_ordering(header)\n\nReturns the column ordering given the file header\n\n\n\n\n\n","category":"function"},{"location":"library/#Index-1","page":"Library","title":"Index","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"","category":"page"},{"location":"#OptimizationParameters-1","page":"Home","title":"OptimizationParameters","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Convenient optimization framework parameter manipulation in Julia","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Author: Taylor McDonnell","category":"page"},{"location":"#","page":"Home","title":"Home","text":"OptimizationParameters provides a unified framework for managing both design variables and parameters within nonlinear optimization frameworks.","category":"page"},{"location":"#Package-Features-1","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Easily enable/disable design variables\nAutomatically scale/descale design variables\nUse arbitrarily shaped design variables\nCustomize design variable bounds and scaling\nSet up optimizations and store optimization results and parameters using simple, yet powerful, CSV files\nAccess design variables by name rather than index within the optimization framework\nPerform all of these tasks with negligible overhead during the optimization","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Enter the package manager by typing ] and then run the following:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"pkg> add https://github.com/byuflowlab/OptimizationParameters.jl","category":"page"},{"location":"#Usage-1","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"See the example","category":"page"},{"location":"example/#Example-1","page":"Example","title":"Example","text":"","category":"section"},{"location":"example/#","page":"Example","title":"Example","text":"This example shows how to use OptimizationParameters to set up the design variables and parameters for an optimization.","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"Pages = [\"example.md\"]\nDepth = 3","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"using OptimizationParameters","category":"page"},{"location":"example/#Creating-a-dictionary/named-tuple-of-optimization-parameters-1","page":"Example","title":"Creating a dictionary/named tuple of optimization parameters","text":"","category":"section"},{"location":"example/#","page":"Example","title":"Example","text":"The building block of the entire optimization parameter interface is the OptimizationParameter composite type.  ","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"This object stores a number of details about each variable including the variable's:","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"Default value(s)\nLower and upper bound(s) (when used as a design variable)\nScaling (when used as a design variable)\nDesign variable flag(s) indicating whether the parameter is a design variable\nA description of the variable","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"design_variable1 = OptimizationParameter(1.0, lb=0.0, ub=10.0, scaling=1.0, dv=true, description=\"A design variable\")\nnothing #hide","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"Instances of OptimizationParameter don't have to be design variables.  They can also just be parameters that you would like to be able to change easily between optimization runs.  These parameters can be floats, integers, booleans, strings, etc.  The only requirement is that if the parameter is an active design variable, it must be continuous.","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"int_parameter = OptimizationParameter(1)\nbool_parameter = OptimizationParameter(true)\nstring_parameter = OptimizationParameter(\"foo\")\nnothing #hide","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"In order to associate instances of OptimizationParameter with variable names, we use either a named tuple or a dictionary.  Named tuples are preferred for performance, since they provide type information to the compiler, but dictionaries are often more convenient for construction and debugging.  ","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"# dictionary of OptimizationParameters\ndict = Dict(:design1=>design_variable1, :int1=>int_parameter, :bool1=>bool_parameter, :string1=>string_parameter)\n\n# named tuple of OptimizationParameters\nnt = (; :design1=>design_variable1, :int1=>int_parameter, :bool1=>bool_parameter, :string1=>string_parameter)\n\nnothing #hide","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"Fortunately, both can be used interchangeably if we use symbols as keys and access optimization parameters by indexing.","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"# indexing works for both named dictionaries and named tuples\ndict[:design1]\nnt[:design1]\nnothing #hide","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"For convenience we provide the functions named_tuple_to_dict and dict_to_named_tuple to convert to and from dictionaries and named tuples.","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"Perhaps the easiest way to construct a dictionary or named tuple of objects of type OptimizationParameter is to use a CSV input file.  The input file for this example has the following structure:","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"Parameter Initial Value(s) Lower Bound(s) Upper Bound(s) Scaling Design Variable(s)? Description\n      \n# Scalar Parameters      \nscalar1 0 -Inf Inf 1 false this variable has all fields filled in\nscalar2 0     this variable has almost no fields filled in, but is identical to scalar1\nscalar3 0 -Inf Inf 1 true this variable is the same as scalar1, but is activated\nscalar4 250 100 1000 0.002 true this variable is scaled to be roughly of order 1\nscalar5 10     variables don't have to be design variables, they can also just be parameters\nscalar6 -1    FALSE note that the case doesn't matter for the design variable flag\n      \n# Vector Parameters      \nvector1 [1, 2, 8, 9] 0 10 1 TRUE this is an example of a vector parameter\nvector2 [1, 2, 8, 9] [0,0,5,5] [5,5,10,10] [1,1,0.5,0.5] TRUE scalars and/or vectors can be used for any field\nvector3 [1, 2, 8, 9] [0,0,5,5] [5,5,10,10] [1,1,0.5,0.5] [true, false, true, false] we can even use only part of an array as a design variable\nvector4 0.5*ones(10) zeros(10) 1 ones(10)*0.5 TRUE all values can also be input as generic Julia code\n      \n# Matrix Parameters      \nmatrix1 [1 3; 2 4] 0 10 1 true the shape of vectors and matrices will be preserved\n      \n# Other Parameters      \nbool1 true     we can also include other types of variables as design parameters\nint1 1     integers will be converted to floats when used as design variables, but otherwise left as integers\nstring1 \"foo\"     some types of variables like strings cannot be design variables","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"Input files like this one may be read into either a dict or a named tuple using read_parameters.","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"optparams = read_parameters(\"example.csv\")\nnothing #hide","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"Note that the shape of design variables/parameters is preserved when using OptimizationParameters and that initial values, lower bounds, upper bounds, scaling factors, and design variable flags can be specified using a single value, or an array of values.  This makes the OptimizationParameter interface extremely powerful for managing design variables.","category":"page"},{"location":"example/#Modifying-the-dictionary/named-tuple-of-optimization-parameters-1","page":"Example","title":"Modifying the dictionary/named tuple of optimization parameters","text":"","category":"section"},{"location":"example/#","page":"Example","title":"Example","text":"Sometimes it is necessary/convenient to modify the dictionary/named tuple of optimization parameters.  This is easily done using the set_x0, set_lb, set_ub, set_dv, and set_description functions.  Here we will activate the scalar1 design variable:","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"optparams = set_dv(optparams, :scalar1, true)\nnothing #hide","category":"page"},{"location":"example/#Assembling-the-input-for-the-optimization-1","page":"Example","title":"Assembling the input for the optimization","text":"","category":"section"},{"location":"example/#","page":"Example","title":"Example","text":"Assembling the design variable initial value, lower bound, and upper bound arrays is done using the assemble_input function.  This function automatically scales the design variables and centers them around zero.","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"x0, lb, ub = assemble_input(optparams)\nnothing #hide","category":"page"},{"location":"example/#Extracting-parameters-in-the-optimization-1","page":"Example","title":"Extracting parameters in the optimization","text":"","category":"section"},{"location":"example/#","page":"Example","title":"Example","text":"Inside the optimization, OptimizationParameters just needs access to design variable value array and the dictionary/named tuple of optimization parameters.  get_values then allows you to extract the parameter values, appropriately modified based on the values in the design variable array as a dictionary/named tuple.  ","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"x = rand(length(x0)) # design variable values provided by optimizer\nparameters = get_values(optparams, x) # dictionary or named tuple of parameter values","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"These parameter values may be accessed using the common indexing notation for both types discussed previously.","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"parameters[:scalar1]","category":"page"},{"location":"example/#Printing-active-design-variables-during-the-optimization-1","page":"Example","title":"Printing active design variables during the optimization","text":"","category":"section"},{"location":"example/#","page":"Example","title":"Example","text":"Active design variables may be printed during the optimization with print_design_variables","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"print_design_variables(optparams, x)","category":"page"},{"location":"example/#Updating-optimization-parameters-after-the-optimization-1","page":"Example","title":"Updating optimization parameters after the optimization","text":"","category":"section"},{"location":"example/#","page":"Example","title":"Example","text":"After the optimization, the optimizer returns a vector of optimal design variables.  These variables may be used to replace the optimization parameter initial values using update_parameters","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"xopt = rand(length(x0)) # optimal design variable values provided by the optimizer\noptimized = update_parameters(optparams, xopt) # updates parameter values","category":"page"},{"location":"example/#Writing-results-to-a-file-1","page":"Example","title":"Writing results to a file","text":"","category":"section"},{"location":"example/#","page":"Example","title":"Example","text":"The updated optimization parameters may then be written to a CSV file using write_parameters.  ","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"write_parameters(\"optimized.csv\", optimized)","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"When writing CSV files, a template file (such as the input file) may be used to specify the order of the parameters and to insert comments and blank lines in the resulting file.","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"write_parameters(\"example.csv\", \"optimized.csv\", optimized)","category":"page"},{"location":"example/#Updating-optimization-parameters-using-a-previous-optimization-1","page":"Example","title":"Updating optimization parameters using a previous optimization","text":"","category":"section"},{"location":"example/#","page":"Example","title":"Example","text":"In some cases, we may want to use initial parameter values for design variables that correspond to the optimized design variables found in another optimization run.  update_design_variables allows you to update the initial values of the design variables in one set of optimization parameters with the optimized design variables of another set of optimization parameters.","category":"page"},{"location":"example/#","page":"Example","title":"Example","text":"optparams = update_design_variables(optparams, optimized)","category":"page"}]
}
